import _sinon, { SinonStub } from 'sinon';

/**
 * A type that represents the response of a mock. This could be a value, or a
 * function that in turn returns a value.
 */
export type MockResponse<T> = T | ((...args) => T);

/**
 * Class that creates a mock method on an object, and provides useful methods
 * to track the response returned on each call.
 *
 * <p>
 * This class is not meant to be instantiated directly, but is designed for
 * use within the [ObjectMock]{@link ObjectMock} class.
 * </p>
 */
export default class Mock<T> {
    private _instance: Record<string, unknown>;
    private _methodName: string;
    private _stub: SinonStub;
    private _responses: T[];

    /**
     * @param instance The object instance on which the method will be mocked.
     * @param  methodName The name of the method on the object that needs to be
     * mocked. If the specified method does not exist, a placeholder method will
     * be injected into the instance which will then be mocked.
     *
     * @param returnValue A return value that will be returned by the mock
     * method. If a function is passed in, the function will be invoked, and
     * ther return value of the function will be returned as the response.
     */
    constructor(
        instance: Record<string, unknown>,
        methodName: string,
        returnValue: MockResponse<T>
    ) {
        if (
            !instance ||
            instance instanceof Array ||
            typeof instance !== 'object'
        ) {
            throw new Error('Invalid instance specified (arg #1)');
        }
        if (typeof methodName !== 'string' || methodName.length <= 0) {
            throw new Error('Invalid methodName specified (arg #2)');
        }

        this._instance = instance;
        this._methodName = methodName;
        if (typeof instance[methodName] !== 'function') {
            instance[methodName] = () => undefined;
        }
        this._responses = [];
        this._stub = _sinon.stub(
            this._instance,
            this._methodName as keyof Record<string, unknown>
        );
        this._stub.callsFake((...args) => {
            const ret: T =
                typeof returnValue === 'function'
                    ? (returnValue as (...args) => T)(...args)
                    : returnValue;
            this._responses.push(ret);
            return ret;
        });
    }

    /**
     * Returns a reference to the instance object that has the mocks applied to
     * it.
     */
    get instance(): Record<string, unknown> {
        return this._instance;
    }

    /**
     * Returns the name of the mock, which is the name of the method that has
     * been mocked.
     */
    get methodName(): string {
        return this._methodName;
    }

    /**
     * Returns a reference to the stub method generated by this class. This
     * property can be used to examine the call history and parameters of
     * the mocked method.
     */
    get stub(): SinonStub {
        return this._stub;
    }

    /**
     * Returns a list of responses returned by the mock up to the current time.
     * Responses may be promises depending on how the mock has been configured.
     */
    get responses(): T[] {
        return this._responses;
    }

    /**
     * Returns the response from the first mock invocation. If the mock has not
     * been invoked yet, an Error object will be returned.
     */
    get ret(): T | Error {
        if (this.responses.length <= 0) {
            return new Error('Method has not yet been called');
        }
        return this.responses[0];
    }

    /**
     * Clears all responses that have been tracked up to this point, and also
     * resets the mock's call history.
     */
    reset(): void {
        this.responses.splice(0);
        this.stub.resetHistory();
    }
}
